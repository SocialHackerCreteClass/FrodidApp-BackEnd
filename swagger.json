{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample documentation for the SHA project (FrodidApp)",
    "version": "1.0.0",
    "title": "FrodidApp",
    "termsOfService": "",
    "contact": {
      "email": "semerkhet40@hotmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "ec2-18-185-66-15.eu-central-1.compute.amazonaws.com",
  "basePath": "/",
  "tags": [
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "roles",
      "description": "All about roles table"
    },
    {
      "name": "users",
      "description": "All about users table"
    },
    {
      "name": "visits",
      "description": "All about visits table"
    },
    {
      "name": "countries",
      "description": "All about countries table"
    },
    {
      "name": "users_patients",
      "description": "All about user_patients table"
    },
    {
      "name": "professions",
      "description": "All about professions table"
    },
    {
      "name": "states",
      "description": "All about states table"
    },
    {
      "name": "addresses",
      "description": "All about addresses table"
    },
    {
      "name": "genders",
      "description": "All about genders table"
    },
    {
      "name": "patients",
      "description": "All about patients table"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/roles": {
      "post": {
        "tags": ["roles"],
        "summary": "Creates new role",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["roles"],
        "summary": "Gets a list of all roles",
        "description": "This endpoint uses a get request to retrieve all roles",
        "produces": ["application/json"],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": ["roles"],
        "summary": "Gets a single role",
        "description": "This endpoint uses a get request to retrieve a specific role",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Roles"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["roles"],
        "summary": "Updates a role in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated role object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["roles"],
        "summary": "Deletes a role",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Role not found"
          }
        }
      }
    },
    "/professions": {
      "post": {
        "tags": ["professions"],
        "summary": "Creates new profession",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created profession object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Professions"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["professions"],
        "summary": "Gets a list of all professions",
        "description": "This endpoint uses a get request to retrieve all professions",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/professions/{id}": {
      "get": {
        "tags": ["professions"],
        "summary": "Gets a single profession",
        "description": "This endpoint uses a get request to retrieve a specific profession",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profession unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Professions"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["professions"],
        "summary": "Updates a profession in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of profession that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated profession object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Professions"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["professions"],
        "summary": "Deletes a profession",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Profession id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Role not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": ["users"],
        "summary": "Creates new user",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["users"],
        "summary": "Gets a list of all countries",
        "description": "This endpoint uses a get request to retrieve all countries",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Gets a single user",
        "description": "This endpoint uses a get request to retrieve a specific user",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Updates a user in the users table",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of country that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Deletes a country",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Country not found"
          }
        }
      }
    },
    "/visits": {
      "post": {
        "tags": ["visits"],
        "summary": "Creates new visit",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Visits"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["visits"],
        "summary": "Gets a list of all visits",
        "description": "This endpoint uses a get request to retrieve all visits",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/visits/{id}": {
      "get": {
        "tags": ["visits"],
        "summary": "Gets a single visit",
        "description": "This endpoint uses a get request to retrieve a specific visit",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Visits"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["visits"],
        "summary": "Updates a user in the visits table",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of visit that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created visit object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Visits"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["visits"],
        "summary": "Deletes a visit",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Visit id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Visit not found"
          }
        }
      }
    },
    "/countries": {
      "post": {
        "tags": ["countries"],
        "summary": "Creates new country",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Countries"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["countries"],
        "summary": "Gets a list of all countries",
        "description": "This endpoint uses a get request to retrieve all countries",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/countries/{id}": {
      "get": {
        "tags": ["countries"],
        "summary": "Gets a single country",
        "description": "This endpoint uses a get request to retrieve a specific country",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Countries"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["countries"],
        "summary": "Updates a country in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of country that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "example": {
                "name": "Banana Republic"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["countries"],
        "summary": "Deletes a country",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Country id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Country not found"
          }
        }
      }
    },
    "/users_patients": {
      "post": {
        "tags": ["users_patients"],
        "summary": "Creates new user_patient row",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users_Patients"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["users_patients"],
        "summary": "Gets a list of all users_patients",
        "description": "This endpoint uses a get request to retrieve all users_patients",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/users_patients/{id}": {
      "get": {
        "tags": ["users_patients"],
        "summary": "Gets a single users_patients row",
        "description": "This endpoint uses a get request to retrieve a specific users_patients",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "users_patients unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Countries"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["users_patients"],
        "summary": "Updates a users_patients in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of users_patients that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created users_patients object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users_Patients"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["users_patients"],
        "summary": "Deletes a users_patients",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "users_patients id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "users_patients not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/states": {
      "post": {
        "tags": ["states"],
        "summary": "Creates new state",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created state object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/States"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["states"],
        "summary": "Gets a list of all states",
        "description": "This endpoint uses a get request to retrieve all states",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/states/{id}": {
      "get": {
        "tags": ["states"],
        "summary": "Gets a single state",
        "description": "This endpoint uses a get request to retrieve a specific state",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "State unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/States"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["states"],
        "summary": "Updates a state in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of state that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated state object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/States"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["states"],
        "summary": "Deletes a state",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "State id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "State not found"
          }
        }
      }
    },
    "/addresses": {
      "post": {
        "tags": ["addresses"],
        "summary": "Creates new address",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created address object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Addresses"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["addresses"],
        "summary": "Gets a list of all addresses",
        "description": "This endpoint uses a get request to retrieve all addresses",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/addresses/{id}": {
      "get": {
        "tags": ["addresses"],
        "summary": "Gets a single address",
        "description": "This endpoint uses a get request to retrieve a specific address",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Address unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Addresses"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["addresses"],
        "summary": "Updates a user in the addresses table",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of address that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created address object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Addresses"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["addresses"],
        "summary": "Deletes an address",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Address id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Address not found"
          }
        }
      }
    },
    "/genders": {
      "post": {
        "tags": ["genders"],
        "summary": "Creates new gender",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Genders"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["genders"],
        "summary": "Gets a list of all genders",
        "description": "This endpoint uses a get request to retrieve all genders",
        "produces": ["application/json"],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/genders/{id}": {
      "get": {
        "tags": ["genders"],
        "summary": "Gets a single gender",
        "description": "This endpoint uses a get request to retrieve a specific gender",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gender unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Genders"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["genders"],
        "summary": "Updates a gender in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of gender that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated gender object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Genders"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["genders"],
        "summary": "Deletes a gender",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gender id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Gender not found"
          }
        }
      }
    },
    "/patients": {
      "post": {
        "tags": ["patients"],
        "summary": "Creates new patient",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created patient object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Patients"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": ["patients"],
        "summary": "Gets a list of all patients",
        "description": "This endpoint uses a get request to retrieve all patients",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "items_per_page",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "page_number",
            "type": "integer",
            "required": false
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/patients/{id}": {
      "get": {
        "tags": ["patients"],
        "summary": "Gets a single patient",
        "description": "This endpoint uses a get request to retrieve a specific patient",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Patient unique identifier",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patients"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": ["patients"],
        "summary": "Updates a user in the patients table",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of patient that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created patient object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["patients"],
        "summary": "Deletes a patient",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Patient id to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Patient not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Professions": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "expert in experts"
        }
      }
    },
    "Roles": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "johndoe@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "pass12345"
        },
        "birth_date": {
          "type": "string",
          "format": "date-time",
          "example": "2000-01-31"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "example": "2020-01-31"
        },
        "afm": {
          "type": "string",
          "example": "111111"
        },
        "amka": {
          "type": "string",
          "example": "2222222"
        },
        "role_id": {
          "type": "integer",
          "example": 1
        },
        "profession_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "Visits": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "example": "2000-01-31"
        },
        "comment": {
          "type": "string",
          "example": "Patient requires more medicine and a second visit"
        },
        "start_time": {
          "type": "string",
          "example": "03:07:00"
        },
        "end_time": {
          "type": "string",
          "example": "05:10:00"
        },
        "user_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "Countries": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Greece"
        }
      }
    },
    "Users_Patients": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer",
          "example": 1
        },
        "patient_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "States": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Attiki"
        }
      }
    },
    "Addresses": {
      "type": "object",
      "properties": {
        "street": {
          "type": "string",
          "example": "Stournari"
        },
        "street_no": {
          "type": "string",
          "example": "15A"
        },
        "region": {
          "type": "string",
          "example": "Exarchia"
        },
        "zipcode": {
          "type": "string",
          "example": "75 254A"
        },
        "country_id": {
          "type": "integer",
          "example": 1
        },
        "state_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "Genders": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "female"
        }
      }
    },
    "Patients": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doe"
        },
        "telephone": {
          "type": "string",
          "example": "+030 2310827834"
        },
        "mobile": {
          "type": "string",
          "example": "+030 6954827834"
        },
        "birth_date": {
          "type": "string",
          "format": "date-time",
          "example": "2000-01-31"
        },
        "comment": {
          "type": "string",
          "example": "Patient has lost an eye."
        },
        "afm": {
          "type": "string",
          "example": "111111"
        },
        "amka": {
          "type": "string",
          "example": "2222222"
        },
        "gender_id": {
          "type": "integer",
          "example": 1
        },
        "address_id": {
          "type": "integer",
          "example": 1
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
