{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample documentation for the SHA project (FrodidApp)",
    "version": "1.0.0",
    "title": "FrodidApp",
    "termsOfService": "",
    "contact": {
      "email": "semerkhet40@hotmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "ec2-15-188-52-120.eu-west-3.compute.amazonaws.com",
  "basePath": "/",
  "tags": [
    {
      "name": "auth",
      "description": "Authenticate admin"
    },
    {
      "name": "roles",
      "description": "All about roles table"
    },
    {
      "name": "genders",
      "description": "All about genders table"
    },
    {
      "name": "apps",
      "description": "All about apps table"
    },
    {
      "name": "admins",
      "description": "All about admins table"
    },
    {
      "name": "positions",
      "description": "All about positions table"
    },
    {
      "name": "downloads",
      "description": "All about downloads table"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Log in",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Auth"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Log out",
        "description": "",
        "produces": [
          "application/json"
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/roles": {
      "post": {
        "tags": [
          "roles"
        ],
        "summary": "Creates new role",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Gets a list of all roles",
        "description": "This endpoint uses a get request to retrieve all roles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Gets a single role",
        "description": "This endpoint uses a get request to retrieve a specific role",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role unique identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Roles"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "roles"
        ],
        "summary": "Updates a role in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated role object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Deletes a role",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role id to delete",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Role not found"
          }
        }
      }
    },
    "/genders": {
      "post": {
        "tags": [
          "genders"
        ],
        "summary": "Creates new gender",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Genders"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "genders"
        ],
        "summary": "Gets a list of all genders",
        "description": "This endpoint uses a get request to retrieve all genders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/genders/{id}": {
      "get": {
        "tags": [
          "genders"
        ],
        "summary": "Gets a single gender",
        "description": "This endpoint uses a get request to retrieve a specific gender",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gender unique identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Genders"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "genders"
        ],
        "summary": "Updates a gender in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of gender that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated gender object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Genders"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "genders"
        ],
        "summary": "Deletes a gender",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Gender id to delete",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Gender not found"
          }
        }
      }
    },
    "/apps": {
      "post": {
        "tags": [
          "apps"
        ],
        "summary": "Creates new app",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created app object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Apps"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "apps"
        ],
        "summary": "Gets a list of all apps",
        "description": "This endpoint uses a get request to retrieve all apps",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "pageIndex",
            "type": "integer",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/apps/{id}": {
      "get": {
        "tags": [
          "apps"
        ],
        "summary": "Gets a single application",
        "description": "This endpoint uses a get request to retrieve a specific application",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Application unique identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Apps"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "apps"
        ],
        "summary": "Updates an app in the store with form data",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of an app that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated app object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Apps"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "apps"
        ],
        "summary": "Deletes an app",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App id to delete",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "App not found"
          }
        }
      }
    },
    "/admins": {
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Creates new admin",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created admin object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Admins"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "admins"
        ],
        "summary": "Gets a list of all admins",
        "description": "This endpoint uses a get request to retrieve all admins",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "pageIndex",
            "type": "integer",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/admins/{id}": {
      "get": {
        "tags": [
          "admins"
        ],
        "summary": "Gets a single admin",
        "description": "This endpoint uses a get request to retrieve a specific admin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Admin unique identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Admins"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "admins"
        ],
        "summary": "Updates an admin in the admins table",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of admin that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created admin object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Admins"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "Deletes an admin",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Admin id to delete",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Admin not found"
          }
        }
      }
    },
    "/positions": {
      "post": {
        "tags": [
          "positions"
        ],
        "summary": "Creates new position",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created position object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Positions"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "positions"
        ],
        "summary": "Gets a list of all positions",
        "description": "This endpoint uses a get request to retrieve all positions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "pageIndex",
            "type": "integer",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/positions/{id}": {
      "get": {
        "tags": [
          "positions"
        ],
        "summary": "Gets a single position",
        "description": "This endpoint uses a get request to retrieve a specific position",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Position unique identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Positions"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "positions"
        ],
        "summary": "Updates a position in the positions table",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of position that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created position object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Positions"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "positions"
        ],
        "summary": "Deletes a position",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Position id to delete",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Position not found"
          }
        }
      }
    },
    "/downloads": {
      "post": {
        "tags": [
          "downloads"
        ],
        "summary": "Creates new download row",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created download object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Downloads"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Gets a list of all downloads",
        "description": "This endpoint uses a get request to retrieve all downloads",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "type": "integer",
            "required": false
          },
          {
            "in": "query",
            "name": "pageIndex",
            "type": "integer",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/downloads/{id}": {
      "get": {
        "tags": [
          "downloads"
        ],
        "summary": "Gets a single download",
        "description": "This endpoint uses a get request to retrieve a specific download row",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Download unique identifier",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Downloads"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "downloads"
        ],
        "summary": "Updates a download row",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of download row that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created download object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Downloads"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "downloads"
        ],
        "summary": "Deletes a download row",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Download id to delete",
            "required": true,
            "type": "integer"
          },
          {
            "in": "header",
            "name": "Authorization",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Download not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Roles": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "admin"
        }
      }
    },
    "Genders": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "female"
        }
      }
    },
    "Apps": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ISO_GREAT"
        }
      }
    },
    "Admins": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string",
          "example": "Buda2000"
        },
        "email": {
          "type": "string",
          "example": "buda2000@hotmail.com"
        },
        "password": {
          "type": "string",
          "example": "password"
        },
        "role_id": {
          "type": "integer",
          "example": 2
        }
      }
    },
    "Positions": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "string",
          "example": 11.111111111
        },
        "longitude": {
          "type": "string",
          "example": 11.111111111
        },
        "country": {
          "type": "string",
          "example": "UK"
        },
        "state": {
          "type": "string",
          "example": "Ohio"
        },
        "city": {
          "type": "string",
          "example": "Manila"
        },
        "street_name": {
          "type": "string",
          "example": "Av. Bordeaux"
        },
        "zipcode": {
          "type": "string",
          "example": 12345
        }
      }
    },
    "Downloads": {
      "type": "object",
      "properties": {
        "user_name": {
          "type": "string",
          "example": "John"
        },
        "email": {
          "type": "string",
          "example": "johndoe@gmail.com"
        },
        "downloaded_at": {
          "type": "string",
          "format": "date-time",
          "example": "14:08:00"
        },
        "download_date": {
          "type": "string",
          "format": "date-time",
          "example": "2020-01-31"
        },
        "app_id": {
          "type": "integer",
          "example": 1
        },
        "gender_id": {
          "type": "integer",
          "example": 1
        },
        "position_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "Auth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "johndoe@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "pass12345"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}